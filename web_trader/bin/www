#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web_trader:server');
var http = require('http');
var pjson = require('../package.json');

//import object
var BroadcastService = require('../controllers/BroadcastService');
var nClients = 0;

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(pjson.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
app.set('broadcastService', new BroadcastService(io));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//server.on('connection', function(socket) {
////  socket.on("getSomeData", function(name,fn) {
////      fn({data: "some random data"});
////  });
//	console.log('client connect');
////	socket.emit('serverMessage', 'Got a message!');
////	socket.emit('data', {data: app.get('map').values()});
//});

server.on('connection', function(socket) {
//  socket.on("getSomeData", function(name,fn) {
//      fn({data: "some random data"});
//  });
	nClients++;
	app.set('nClients', nClients);
	console.log('client connect');
//	app.onConnect();
	socket.emit('someEvent', 'Got a message!');
	
//	socket.emit('data', {data: app.get('map').values()});
});

server.on('disconnect', function(socket) {
//  socket.on("getSomeData", function(name,fn) {
//      fn({data: "some random data"});
//  });
	nClients--;
	app.set('nClients', nClients);
	console.log('client disconnect');
//	app.onDisconnect();
//	socket.emit('serverMessage', 'Got a message!');
//	socket.emit('data', {data: app.get('map').values()});
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
