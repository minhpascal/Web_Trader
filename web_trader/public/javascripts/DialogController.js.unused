/**
 * http://usejsdoc.org/
 */
angular.module('app').controller('DialogController', ['$scope', '$mdDialog', '$http', 'locals', 'uiGridConstants', '$templateCache', 
	function ($scope, $mdDialog, $http, locals, uiGridConstants, $templateCache)
	// ====================== DialogController start ===========================
//	function DialogController($scope, $mdDialog, $http, locals, uiGridConstants, $templateCache) 
	{
		$scope.myQty = '';
		$scope.myDelta = '';
		$scope.myFutMat = '';
$scope.myDelta = 10;
$scope.myQty = 100;
$scope.myFutMat = 'MAR17';

		$scope.myInstrList = locals.myInstrList;
		
		$templateCache.put('ui-grid/uiGridViewport',
		"<div class=\"ui-grid-viewport\" ng-style=\"colContainer.getViewportStyle()\"><div class=\"ui-grid-canvas\"><div ng-repeat=\"(rowRenderIndex, row) in rowContainer.renderedRows track by $index\" ng-if=\"grid.appScope.showRow(row.entity)\" class=\"ui-grid-row\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div ui-grid-row=\"row\" row-render-index=\"rowRenderIndex\"></div></div></div></div>"
		);
		$scope.iconTemplate = '<i class="material-icons" style="color:red">error_outline</i>';
		
		str = locals.mySymbol.replace(/ +(?= )/g,'');
		
		var tokens = parseSymbol(str);
		$scope.myInstr = tokens[0];
		$scope.myExpiry = tokens[1];
		$scope.myStrike = tokens[2];
		$scope.myMultiplier = tokens[3];
		$scope.myStrat = tokens[4];
		$scope.myPremium = Number(tokens[5]);
		$scope.myRef = Number(tokens[6].replace(',', ''));
		$scope.myCompany = locals.myBuyer;
		$scope.myCpCompany = locals.mySeller;
		$scope.mySymbol = str;
		$scope.myTrType = locals.myTrType.substring(0,2);
		$scope.isSingle = true;
		if ($scope.myTrType === 'T2') {
			$scope.isSingle = false;
		}
	//$scope.mySide = !side ? SIDE.BUY : side;
		$scope.myUl  = $scope.myInstr;
		
		$scope.param_isShowSendBtn = false;	// display send button
		$scope.param_isQtyValid = false;
		$scope.param_isDeltaValid = false;
		$scope.param_isFutMatValid = false;
		$scope.param_isLastLegPriceValid = false;
		
		var myQty = qty;
		$scope.param_myData = [];
		$scope.myLegData = [];
		var strat = $scope.myStrat;
		var qty = [];
		var ul = [];

		var strike = $scope.myStrike;
		var multiplier = $scope.myMultiplier;
		var ref = Number($scope.myRef);
		var sides = getSidesByParty($scope.myMultiplier, $scope.myCompany, $scope.myCpCompany);
		var instr = tokens[0];
		var futExp = '';

		var multi = getMultiple(multiplier, strat);
		var strikes = getStrikes(multiplier, tokens[2], strat);
		
	//var expiry = tokens[1];
		var maturities = getMaturities(multiplier, tokens[1], strat);
		
		$scope.myParam = [
			{'UL': $scope.myUl, 'Strategy': $scope.myStrat, 'Expiry': $scope.myExpiry,
			'Strike': $scope.myStrike, 'Multiplier': $scope.myMultiplier, 'Premium': $scope.myPremium, 
			// TODO : remove from testing
			'Qty': $scope.myQty, 'Delta': $scope.myDelta, 'FutMat': $scope.myFutMat, 
			'Buyer': $scope.myCompany, 'Seller': $scope.myCpCompany,
			'Ref': $scope.myRef, 'isQtyValid' : false, 'isDeltaValid' : false,
			'modernBrowsers' : [
			    { icon: '', name: "JAN17", ticked: false  },
			    { icon: '', name: "FEB17", ticked: false  },
			    { icon: '', name: "MAR17", ticked: false  },
			    { icon: '', name: "APR17", ticked: false  },
			    { icon: '', name: "MAY17", ticked: false  },
			    { icon: '', name: "JUN17", ticked: false  },
			    { icon: '', name: "JUL17", ticked: false  },
			    { icon: '', name: "AUG17", ticked: false  },
			    { icon: '', name: "SEP17", ticked: false  },
			    { icon: '', name: "OCT17", ticked: false  },
			    { icon: '', name: "NOV17", ticked: false  },
			    { icon: '', name: "DEC17", ticked: false  },
				{ icon: $scope.iconTemplate, name: '', ticked: true , disabled: true },
			], 
			'outputBrowsers' : [],
			},
		];
		
		/* 
		 * =============== Do not remove =================
		 * 'displayTag' 
		 * 1 - not editable (future leg and splits)input
		 * 2 - not editable (invalid price of last leg)
		 * 3 - input legs (price valid)
		 * 4 - input legs (price invalid -> quotation mark) 
		 */ 
		
		switch (strat) {
		case 'C': { // 'EC - European Call':
			ul[0] = exchangeSymbol(instr, 'C', strikes[0], maturities[0], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Call', 'Instrument' : ul[0], 'Expiry' : maturities[0], 
				'Strike' : strikes[0], 'Qty' : '', 'Price' : $scope.myPremium,
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 
				'Strike' : '', 'Qty' : '', 
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
				'isHide' : true, 'isSingle': $scope.isSingle
			};
			$scope.param_isLastLegPriceValid = true;
			break;
		}
		// put strategy
		case 'P' : { // - European Put': {
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 'Price' : $scope.myPremium,
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
				'isHide' : true, 'isSingle': $scope.isSingleLeg,
			};
			$scope.param_isLastLegPriceValid = true;
			break;
		}
		case 'CL':  // 'ECL - European Call Ladder':
		case 'CTL' : // - European Call Time Ladder':
		case 'CFLY':  // butterfly
		case 'CB':  // 'ECB - European Call Butterfly':
		case 'CTB': { // 'ECTB - European Call Time Butterfly':
			ul[0] = exchangeSymbol(instr, 'C', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'C', strikes[2], maturities[2], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Call', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]), 
				'displayTag' : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable': true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable': true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Call', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable': false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false,  'isEditable': false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;			
		}
		case 'PL':  // 'EPL - European Put Ladder':
		case 'PTL' : // - European Put Time Ladder':
		case 'PFLY':  // butterfly
		case 'PB':  // 'EPB - European Put Butterfly':
		case 'PTB': { // 'EPTB - European Put Time Butterfly':
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'P', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'P', strikes[2], maturities[2], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Put', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Put', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;			
		}
		case 'CDOR':  // 'ECC - European Call Condor':
		case 'CC':  // 'ECC - European Call Condor':
		case 'CTC': { // 'ECC - European Call Time Condor':
			ul[0] = exchangeSymbol(instr, 'C', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'C', strikes[2], maturities[2], $scope.myInstrList);
			ul[3] = exchangeSymbol(instr, 'C', strikes[3], maturities[3], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Call', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Call', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]),
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Call', 'Instrument' : ul[3], 'Expiry' : maturities[3], 'Strike' : strikes[3], 'Qty' : '', 
				'Buyer': sides[3][0], 'Seller': sides[3][1], 'Multiplier' : Number(multi[3]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[4] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'PC': 
		case 'PDOR': // 'EPC - European Put Condor':
		case 'PTC': {// 'EPC - European Put Time Condor':
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'P', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'P', strikes[2], maturities[2], $scope.myInstrList);
			ul[3] = exchangeSymbol(instr, 'P', strikes[3], maturities[3], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Put', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Put', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Put', 'Instrument' : ul[3], 'Expiry' : maturities[3], 'Strike' : strikes[3], 'Qty' : '', 
				'Buyer': sides[3][0], 'Seller': sides[3][1], 'Multiplier' : Number(multi[3]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[4] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'CS':  // 'ECDIAG - European Call Diagonal':
		case 'CDIAG':  // 'ECDIAG - European Call Diagonal':
		case 'CR':  // 'ECR - European Call Ratio':
		case 'CTR':  // 'ECTR - European Call Time Ratio':
		case 'CTS': { // 'ECTS - European Call Time Spread':
			ul[0] = exchangeSymbol(instr, 'C', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			
			$scope.param_myData[0] = {
				'UL' : instr + ' Call', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]), 
				displayTag: CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, isEditable: true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag: CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, isEditable: false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : '', 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Multiplier' : 0, 'Price' : ref,  
				displayTag: CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'PS':  // 'EPS - European Put Spread':
		case 'PDIAG':  // 'EPS - European Put Spread':
		case 'PR':  // 'ECR - European Put Ratio':
		case 'PTR':  // 'ECTR - European Put Time Ratio':
		case 'PTS': { // 'ECTS - European Put Time Spread':
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'P', strikes[1], maturities[1], $scope.myInstrList);
			
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Put', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Multiplier' : 0, 'Price' : ref, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'IF':  // - European Iron Fly':
		case 'IFR' :  // - European Iron Fly Ratio':
		case 'SDTS' : {// - European Straddle Time Spread'
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'P', strikes[2], maturities[2], $scope.myInstrList);
			ul[3] = exchangeSymbol(instr, 'C', strikes[3], maturities[3], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Put', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Call', 'Instrument' : ul[3], 'Expiry' : maturities[3], 'Strike' : strikes[3], 'Qty' : '', 
				'Buyer': sides[3][0], 'Seller': sides[3][1], 'Multiplier' : Number(multi[3]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[4] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Multiplier' : 0, 'Price' : ref, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'SG' :  // } - European Strangle':
		case 'RR' :  {// - European Risk Reversal':
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'SD':  // } - European Straddle':
		case 'SYNTH': { // - European Synthetic Put Over':
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Put', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Call', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0,
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		case 'SPRD' : { // - Spread'
			ul[0] = exchangeSymbol(instr, 'P', strikes[0], maturities[0], $scope.myInstrList);
			ul[1] = exchangeSymbol(instr, 'C', strikes[1], maturities[1], $scope.myInstrList);
			ul[2] = exchangeSymbol(instr, 'P', strikes[2], maturities[2], $scope.myInstrList);
			ul[3] = exchangeSymbol(instr, 'C', strikes[3], maturities[3], $scope.myInstrList);
			$scope.param_myData[0] = {
				'UL' : instr + ' Call', 'Instrument' : ul[0], 'Expiry' : maturities[0], 'Strike' : strikes[0], 'Qty' : '', 
				'Buyer': sides[0][0], 'Seller': sides[0][1], 'Multiplier' : Number(multi[0]),	
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[1] = {
				'UL' : instr + ' Put', 'Instrument' : ul[1], 'Expiry' : maturities[1], 'Strike' : strikes[1], 'Qty' : '', 
				'Buyer': sides[1][0], 'Seller': sides[1][1], 'Multiplier' : Number(multi[1]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[2] = {
				'UL' : instr + ' Call', 'Instrument' : ul[2], 'Expiry' : maturities[2], 'Strike' : strikes[2], 'Qty' : '', 
				'Buyer': sides[2][0], 'Seller': sides[2][1], 'Multiplier' : Number(multi[2]), 
				displayTag : CFG.DISPLAY_PRICE_EDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : true,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[3] = {
				'UL' : instr + ' Put', 'Instrument' : ul[3], 'Expiry' : maturities[3], 'Strike' : strikes[3], 'Qty' : '', 
				'Buyer': sides[3][0], 'Seller': sides[3][1], 'Multiplier' : Number(multi[3]), 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_INVALID, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : true, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			$scope.param_myData[4] = {
				'UL' : instr + ' Future', 'Instrument' : '', 'Expiry' : futExp, 'Strike' : '', 'Qty' : '',
				'Buyer': '', 'Seller': '', 'Price' : ref, 'Multiplier' : 0, 
				'displayTag' : CFG.DISPLAY_PRICE_NOEDIT_OK, displayQty: CFG.DISPLAY_QTY_INVALID, 
				'isLastLeg' : false, 'isEditable' : false,
				'Group': 1, 'TrType': $scope.myTrType, 
			};
			break;
		}
		// 'ESGAC - European Strangle VS Call',
		// 'ESGAP - European Strangle VS Put',
		// 'ESGTS - European Strangle Time Spread',
		// 'ETRR - European Time Risk Reversal',
		// 'ECSAC - European Call Spread VS Call',
		// 'ECSAP - European Call Spread Against Put',
		// 'ECSAPR - European Call Spread VS Put (Ratio',
		// 'ECSAPPO - European Call Spread VS Put - Put Over',
		// 'ECSPS - European Call Spread VS Put Spread',
		// 'ECSTR - European Call Spread Time Ratio',
		// 'ECSTS - European Call Spread Time Spread',
		// 'ECTSAP - European Call Time Spread Against Put',
		// 'EPSAC - European Put Spread Against Call',
		// 'EPSACR - European Put Spread VS Call (Ratio',
		// 'EPSACCO - European Put Spread VS Call - Call Over',
		// 'EPSAP - European Put Spread VS Put',
		// 'EPSTUP - European Put Stupid',
		// 'EPTSAC - European Put Time Spread Against Call',
		// 'ESDAC - European Straddle VS Call',
		// 'ESDAP - European Straddle VS Put',
		// 'FWDB - Forward Butterfly',

		default:
			alert('no matching');
			break;
		}
		
		$scope.myLegData = $scope.param_myData;
		
		$scope.hide = function() {
			$mdDialog.hide();
		};
		
		$scope.sendTradeReport = function(ev) {
			
			refId = new Date().getTime();
			
			var legs = $scope.myLegData;
			for (var i=0; i<$scope.myLegData.length; i++) {
				if ($scope.myLegData[i].isHide 
					|| $scope.myLegData[i].isSingle) {
					legs.splice(i, 1);
				}
			}
			
			$http.post('api/sendTradeReport', {
				'refId'  : refId,
				'trType' : $scope.myTrType,
				'symbol': $scope.mySymbol,
				'qty': $scope.myQty,
				'delta': $scope.myDelta,
				'price': $scope.myPremium,
				'strat' : $scope.myStrat,
				'futMat': $scope.myFutMat,
				'buyer': $scope.myCompany,
				'seller': $scope.myCpCompany,
				'legs' : legs,
			}).then(function(result) {
			});
			
			$mdDialog.cancel();
		};

		$scope.paramGridOptions = {
			    data : 'myParam',
				appScopeProvider: {
					showRow: function(row) {
						return true;
					},
					fClick: function( rowEntity ) {           
						mb = rowEntity.modernBrowsers;
						if (!rowEntity.isFutMatValid) {	// first set FutMat
							last = mb.length - 1;
							mb.splice(last, 1);	// last one is dummy 'Choose...'
						}
						
						for (var i=0; i<mb.length; i++) {
							if (mb[i].ticked) {
								rowEntity.FutMat = mb[i].name;
							}
							mb[i].icon = '';
						}
					    $scope.afterCellEditParamGrid(rowEntity);
					}
				},
				enableHorizontalScrollbar: false, 
				enableVerticalScrollbar: false,
				rowEditWaitInterval : -1,
				enableSorting : false,
				enableColumnResizing : true,
				enableFiltering : false,
				showGridFooter : false,
				showColumnFooter : false,
			    enableCellEditOnFocus: false,
				columnDefs : [ 
					{field : 'UL', headerCellClass: 'blue-header', width : '*', enableCellEdit: false, enableHiding: false}, 
					{field : 'Strategy', headerCellClass: 'blue-header',displayName:'Strat',width : '*',enableCellEdit: false, enableHiding: false}, 
					{field : 'Expiry', headerCellClass: 'blue-header',width : '*',enableCellEdit: false, enableHiding: false}, 
					{field : 'Strike', headerCellClass: 'blue-header',width : '*',enableCellEdit: false, enableHiding: false}, 
					{field : 'Multiplier', headerCellClass: 'blue-header',width : '*',enableCellEdit: false, enableHiding: false}, 
					{field : 'Qty', headerCellClass: 'blue-header',width : '*',enableCellEdit: true, enableHiding: false,
						cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons" style="color:red" ng-if="!row.entity.isQtyValid">error_outline</i>' 
							+ '{{row.entity.Qty}}</div>',
// cellTemplate: '<div><i class="material-icons" style="color:red" ng-if="grid.appScope.param_isQtyValid === false">error_outline</i>'
// + '{{grid.appScope.myQty}}</div>',
					}, 
					{field : 'isQtyValid', visible: false},
					{field : 'Premium', headerCellClass: 'blue-header', displayName: 'Price', width: '*',enableCellEdit: false, enableHiding: false}, 
					{field : 'Delta', headerCellClass: 'blue-header',width : '*',enableCellEdit : true, enableHiding: false,
// enableCellEditOnFocus: true,
// editableCellTemplate: $scope.cellInputEditableTemplate,
// cellTemplate: '<div><i class="material-icons" style="color:red"
// ng-show="grid.appScope.param_isDeltaValid ===
// false">error_outline</i>{{grid.appScope.myDelta}}</div>',
				          cellTemplate: '<div class="ui-grid-cell-contents"><i class="material-icons" style="color:red" ng-show="row.entity.isDeltaValid === false">error_outline</i>{{row.entity.Delta}}</div>',
					},
	// {field : 'isDeltaValid', visible: false},
	// {
	// field: 'FutMat',
	// headerCellClass: 'blue-header',
	// name: 'FutMat',
	// displayName: 'Fut Mat',
	// editableCellTemplate: 'ui-grid/dropdownEditor',
	// width: '80',
	// // cellFilter: 'mapGender',
	// // cellTemplate: '<div class="ui-grid-cell-contents"><i
	// class="material-icons" style="color:red"
	// ng-show="!row.entity.isFutMatValid">error_outline</i>{{row.entity.FutMat}}</div>',
	// editDropdownValueLabel: 'type',
	// editDropdownOptionsArray: $scope.futMatTypes
	// // [
	// // { id: 'DEC16', type: 'DEC16' },
	// // { id: 'MAR17', type: 'MAR17' },
	// // { id: 'JUN17', type: 'JUN17' }
	// // ]
	// },
					{field : 'Ref', width : '80',enableCellEdit: false, visible: false},
				    {field : 'FutMat', headerCellClass: 'blue-header', width : '*', enableHiding: false,
				    	cellTemplate: '<div><isteven-multi-select input-model="row.entity.modernBrowsers"' 
	// cellTemplate: '<div isteven-multi-select
	// input-model="row.entity.modernBrowsers"'
				    		+ ' output-model="row.entity.outputBrowsers" button-label="icon name" item-label="name" '
				    		+ ' tick-property="ticked" disable-property="disabled"'
	// + ' on-item-click="grid.appScope.fClick( row.entity )"
	// selection-mode="single"></div>'
				    		+ ' on-item-click="grid.appScope.fClick( row.entity )" selection-mode="single"></div>'
				    },
				    {field : 'Buyer', headerCellClass: 'blue-header', width : '*', enableCellEdit: false, enableHiding: false}, 
				    {field : 'Seller', headerCellClass: 'blue-header', width : '*', enableCellEdit: false, enableHiding: false},
				 ],
				exporterMenuPdf : false,
		};
		
	// $scope.myExternalScope = $scope;
		
		$scope.paramGridOptions.onRegisterApi = function(gridApi) {
			$scope.paramGridApi = gridApi;
			gridApi.edit.on.afterCellEdit($scope, $scope.afterCellEditParamGrid);
		};
		
		$scope.afterCellEditParamGrid = function(rowEntity, colDef, newValue, oldValue) {
			var tokens = rowEntity.Multiplier.split('X');
			if (!isNaN(rowEntity.Qty)) {
				var params = [];
				
				// update legs qty
				var isInvalid = false;
				for (var i=0; i<tokens.length; i++) {
					var legQty = rowEntity.Qty * Math.abs(Number(tokens[i]));
					$scope.param_myData[i].Qty = legQty;
					if (CFG.rule_check_qty(rowEntity.UL, legQty)) {
						isInvalid = true;
						$scope.param_myData[i].isQtyValid = false;
					}
				}
				// parameter qty 
				rowEntity.isQtyValid = !isInvalid;
				$scope.param_isQtyValid = !isInvalid;
				$scope.myQty = Number(rowEntity.Qty);
			}
			else {
				$scope.param_isQtyValid = false;
				$scope.myQty = rowEntity.Qty;
				for (var i=0; i<tokens.length; i++) {
					$scope.param_myData[i].Qty = undefined;
				}
			}
			
			if (!isNaN(rowEntity.Delta)/* && rowEntity.Delta !== ''*/) {
				var len = $scope.param_myData.length;
				var delta = Number(rowEntity.Delta);
				var futQty = Number(rowEntity.Qty) * Math.abs(delta) * 0.01;
				$scope.param_myData[len - 1].Qty = futQty;
				$scope.myDelta = Number(rowEntity.Delta);
				
//				var isDigit = (futQty % 1 === 0);
				var isDigit = CFG.rule_check_qty(rowEntity.UL, futQty);
				rowEntity.isDeltaValid = isDigit;
				$scope.param_isDeltaValid = isDigit;
				rowEntity.isQtyValid = isDigit;
				$scope.param_isQtyValid = isDigit;
				
				var isHide = false;
				// update future leg
				if (delta < 0) {
					$scope.param_myData[$scope.param_myData.length - 1].Buyer = $scope.myCompany;
					$scope.param_myData[$scope.param_myData.length - 1].Seller = $scope.myCpCompany;
				}
				else if (delta === 0){
					isHide = true;
				}
				else {
					$scope.param_myData[$scope.param_myData.length - 1].Buyer = $scope.myCpCompany;
					$scope.param_myData[$scope.param_myData.length - 1].Seller = $scope.myCompany;
				}
				$scope.param_myData[$scope.param_myData.length - 1].isHide = 
					isHide || $scope.param_myData[$scope.param_myData.length - 1].isSingle ;
			}
			else {
				$scope.param_isDeltaValid = false;
				rowEntity.isDeltaValid = false;
				$scope.myDelta = undefined;
				$scope.param_myData[$scope.param_myData.length - 1].isHide = false;
			}
			
			if (rowEntity.FutMat && rowEntity.FutMat !== '') {
				$scope.param_myData[$scope.param_myData.length - 1].Expiry = rowEntity.FutMat;
				$scope.param_myData[$scope.param_myData.length - 1].Instrument = exchangeSymbol($scope.myInstr, 'F', 0, rowEntity.FutMat, $scope.myInstrList);
				$scope.param_isFutMatValid = true;
				rowEntity.isFutMatValid = true;
				$scope.myFutMat = rowEntity.FutMat;
			}
			else {
				$scope.param_isFutMatValid = false;
				rowEntity.isFutMatValid = false;
			}
			
//			var accumQty = 0;
			var maxQty = 0;
			var maxQtyIdx = 0;
			// split leg over 1000 qty
			var newLegData = rebuildSplit($scope.param_myData);
			
			// validate splited legs
			$scope.myLegData = newLegData;
			
			$scope.param_isShowSendBtn = ($scope.param_isQtyValid && $scope.param_isDeltaValid 
					&& $scope.param_isFutMatValid && $scope.param_isLastLegPriceValid);
			
			 $scope.gridApi.core.notifyDataChange( uiGridConstants.dataChange.ALL);
			 if (!$scope.$$phase) {
				 $scope.$apply();
			 }
		};
		
//		$templateCache.put('ui-grid/uiGridViewport',
//				"<div class=\"ui-grid-viewport\" ng-style=\"colContainer.getViewportStyle()\"><div class=\"ui-grid-canvas\"><div ng-repeat=\"(rowRenderIndex, row) in rowContainer.renderedRows track by $index\" ng-if=\"grid.appScope.showRow(row.entity)\" class=\"ui-grid-row\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div ui-grid-row=\"row\" row-render-index=\"rowRenderIndex\"></div></div></div></div>"
//		);
		
		var siteNameLink = '<div class="ui-grid-cell-contents" title="{{COL_FIELD}}"><a	ui-sref="sites.site_card({siteid: row.entity._id})">{{COL_FIELD}}</a></div>';
		
		// ========================== gridOptions ================================
		$scope.gridOptions = {
			appScopeProvider: {
				showRow: function(row) {
					if (row.isHide && row.isHide === true)
						return false;
					return true;
				}
			},
	// rowEditWaitInterval : -1,
			data : 'myLegData',
			enableSorting : true,
			enableColumnResizing : true,
			enableFiltering : false,
			showGridFooter : false,
			showColumnFooter : false,
			enableCellEditOnFocus: false,
			columnDefs : [ 
				{field : 'Instrument', 
					headerCellClass: 'brown-header', 
					width : '120', enableCellEdit : false, enableHiding: false,
					cellClass : function(grid, row, col, rowRenderIndex, colRenderIndex) {
						var val = grid.getCellValue(row, col);
						if (val)
							return '';
						return 'missing';
					}
				}, 
				{field : 'UL', headerCellClass: 'brown-header', width: '*', enableCellEdit: false, enableHiding: false }, 
				{field : 'Qty', headerCellClass: 'brown-header', width: '*', enableCellEdit: false, /*enableHiding: false,*/
//				    cellFilter: 'number: 2', 
					cellClass : function(grid, row, col, rowRenderIndex, colRenderIndex) {
						if (row.entity.displayQty === CFG.DISPLAY_QTY_ROUND_TO_MAX)
							return 'insufficient';
						if (row.entity.displayQty === CFG.DISPLAY_QTY_INVALID)
							return 'missing';
						return '';
						
//						var val = grid.getCellValue(row, col);
//						if (!isNaN(val) && val > 0 && (val % 1 === 0) && val < 1001)	// decimal
//							 return '';
//						if (row.entity.displayQty === 1)
//							return '';
//						return 'missing';
					},
					cellTooltip : function(row, col) {
						if (row.entity.displayQty === CFG.DISPLAY_QTY_ROUND_TO_MAX)
							return 'Max Qty < 100. Use this leg as Qty[100] to cross';
						return '';
					},
//					cellTemplate:
//						siteNameLink
//						templateWithTooltip
//						'<div class="ui-grid-cell-contents" ng-if="row.entity.displayQty === 2">{{row.entity.Qty}}</div>'
//						'<div class="ui-grid-cell-contents" ng-if="row.entity.displayQty === 1">{{row.entity.Qty}}</div>'
//						+ '<div class="ui-grid-cell-contents" ng-if="row.entity.displayQty === 2">'
//						+ '<input style="background-color: red; color: white;" ng-input="row.entity.Qty" ng-model="row.entity.Qty" /></div>'
//						+ '<div class="ui-grid-cell-contents" ng-if="row.entity.displayQty === 3">{{row.entity.Qty}}'
//						'<div><span class="formInfo"><a href="ajax.htm?width=375" class="jTip" id="one" name="Cross as 100">?</a></span></div>'
//						'<div><span class="formInfo"><a ui-sref="ajax.htm?width=375" class="jTip" id="one" name="Cross as 100">?</a></span></div>'
//						'<div class="ui-grid-cell-contents" ><a href="#" data-toggle="tooltip" title="Hooray!">{{row.entity.Qty}}</a></div>'
				}, 
				{field : 'Strike', headerCellClass: 'brown-header', width : '*',enableCellEdit : false, enableHiding: false}, 
				{field : 'Expiry',headerCellClass: 'brown-header', width : '*', enableCellEdit : false, enableHiding: false,
					cellClass : function(grid, row, col, rowRenderIndex, colRenderIndex) {
						var val = grid.getCellValue(row, col);
						if (val)
							return '';
						return 'missing';
					}
				}, 
				{field : 'Price', headerCellClass: 'brown-header', width : '*', enableHiding: false,
//enableCellEdit : true,
 cellFilter : 'number: 2',
				    cellEditableCondition: function ($scope) {
				    	if ($scope.row.entity.isEditable)
				    		return true;
				    	return false;
	// 'row.entity.isEditable',
				    },
					cellTemplate: 
						'<div class="ui-grid-cell-contents" style="color:red" ng-if="row.entity.displayTag === 4">'
						+ '<i class="material-icons">error_outline</i>{{row.entity.Price}}</div>'
						+ '<div class="ui-grid-cell-contents" ng-if="row.entity.displayTag === 2">'
						+ '<input style="background-color: red; color: white;" ng-input="row.entity.Price" ng-model="row.entity.Price" /></div>'
						+ '<div class="ui-grid-cell-contents" ng-if="row.entity.displayTag === 3 || row.entity.displayTag === 1">{{row.entity.Price}}</div>'
						
// cellTemplate: '<div><i class="material-icons" style="color:red"
// ng-show="!row.entity.isValidate && row.entity.noPrice">error_outline</i>'
// + '<input ng-if="row.entity.isValidate" style="background-color: red; color:
// white;" ng-input="row.entity.Price" ng-model="row.entity.Price" />'
// + '<input ng-if="!row.entity.isValidate"ng-model="row.entity.Price" />'
// + '</div>',
				},
	            {field : 'displayTag', headerCellClass: 'brown-header', enableCellEdit : false, visible : false},
	            {field : 'displayQty', headerCellClass: 'brown-header', enableCellEdit : false, visible : false},
	            {field : 'isEditable', headerCellClass: 'brown-header', enableCellEdit : false, visible : false},
	            {field : 'Multiplier', headerCellClass: 'brown-header', width : '*', enableCellEdit : false, visible : false},
				{field : 'Buyer', headerCellClass: 'brown-header', width : '*',enableCellEdit : false, enableHiding: false,
					cellClass : function(grid, row, col, rowRenderIndex, colRenderIndex) {
						var val = grid.getCellValue(row, col);
						if (val)
							return '';
						return 'missing';
					}
				}, 
				{field : 'Seller', headerCellClass: 'brown-header', width : '*', enableCellEdit : false, enableHiding: false,
					cellClass : function(grid, row, col, rowRenderIndex, colRenderIndex) {
						var val = grid.getCellValue(row, col);
						if (val)
							return '';
						return 'missing';
					}
				},
				{field : 'Group', headerCellClass: 'brown-header', width : '*'	},
			],
	// rowTemplate: '<div><div style="height: 100%; {\'background-color\': \'\'}"
	// ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by
	// col.colDef.name" class="ui-grid-cell" ng-class="{
	// \'ui-grid-row-header-cell\': col.isRowHeader }" ui-grid-cell></div></div>',
	// exporterMenuPdf : false,
		};

		$scope.gridOptions.onRegisterApi = function(gridApi) {
			$scope.gridApi = gridApi;
			gridApi.edit.on.afterCellEdit($scope, $scope.afterCellEdit);
		};

		$scope.afterCellEdit = function(rowEntity, coldef, newValue, oldValue) {
			var nMissLeg = 0;
			params = [];
			var multi = 0;
			var premium = $scope.myPremium;
			var side = 0;
			rowEntity.noPrice = false;
			var iRow = -1;
			
			for (i = 0; i < $scope.param_myData.length; i++) 
			{
				if ($scope.param_myData[i].Instrument === rowEntity.Instrument) {
					$scope.param_myData[i].Price = rowEntity.Price;
					iRow = i;
				}
				if (isNaN($scope.param_myData[i].Price)) {	// initially ok, 
					nMissLeg++;
				}
			}
			if (nMissLeg > 1) {	// too many missing legs
				var newLegSplits = rebuildSplit($scope.param_myData);
				$scope.myLegData = newLegSplits;
				return;
			}
			
			for (i = 0; i < $scope.param_myData.length - 2; i++) 
			{
				if (!isNaN($scope.param_myData[i].Price)) {
					params.push({
						'side' : $scope.param_myData[i].Side,
						'multiplier' : $scope.param_myData[i].Multiplier,
						'price' : $scope.param_myData[i].Price,
						'option' : $scope.param_myData[i].UL.split(' ')[1],
						'qty' : $scope.param_myData[i].Qty
					});
				} 
			}
			var iCal = $scope.param_myData.length - 2;
			multi = $scope.param_myData[iCal].Multiplier;
			var price = calRemainPrice(params, multi, premium);
			$scope.param_myData[iCal].Price = price;
			
//			if (isNaN(price) || Math.abs(price) < 0.001 || price < 0 || (price % 1 != 0)) {	// has decimal
			if (CFG.rule_check_price($scope.param_myData[0].UL, price)) {	// has decimal
				$scope.param_isLastLegPriceValid = true;
				
				for (i = 0; i < $scope.param_myData.length - 1; i++) {
					$scope.param_myData[i].displayTag = i === iCal ? CFG.DISPLAY_PRICE_NOEDIT_OK : CFG.DISPLAY_PRICE_EDIT_OK;	// Uneditable+Valid
				}
			}
			else {
				$scope.param_myData[iCal].isValidate = true;
				$scope.param_isLastLegPriceValid = false;
				$scope.param_myData[iRow].displayTag = CFG.DISPLAY_PRICE_EDIT_INVALID;	// Editable+Valid
				$scope.param_myData[iCal].displayTag = CFG.DISPLAY_PRICE_NOEDIT_INVALID;	// Uneditable+Valid
			}
			
			var newLegSplits = rebuildSplit($scope.param_myData);
			$scope.myLegData = newLegSplits;
			
			$scope.param_isShowSendBtn = ($scope.param_isQtyValid && $scope.param_isDeltaValid 
					&& $scope.param_isFutMatValid && $scope.param_isLastLegPriceValid);
			
			 $scope.gridApi.core.notifyDataChange( uiGridConstants.dataChange.ALL);
			 if (!$scope.$$phase) {
				 $scope.$apply();
			 }
		};
		// ========================== gridOptions end ================================
		
		$scope.hide = function() {
			$mdDialog.hide();
		};

		$scope.cancel = function() {
			$mdDialog.cancel();
		};

		$scope.answer = function(answer) {
			$mdDialog.hide(answer);
		};
	}]);
	// ====================== DialogController end ===========================